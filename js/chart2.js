d3.csv("data/data.csv").then(function(data) {
  // Chu·∫©n h√≥a d·ªØ li·ªáu
  data.forEach(d => {
    d.SL = +d["SL"];
    d.DonGia = +d["ƒê∆°n gi√°"];
    d.DoanhThu = d.SL * d.DonGia;
  });

  // Gom nh√≥m theo M√£ nh√≥m h√†ng + T√™n nh√≥m h√†ng
  let groupedMap = d3.group(data, d => d["M√£ nh√≥m h√†ng"], d => d["T√™n nh√≥m h√†ng"]);
  let grouped = [];

  groupedMap.forEach((byTen, maNhom) => {
    byTen.forEach((val, tenNhom) => {
      grouped.push({
        Nhom: maNhom,
        Ten: tenNhom,
        SL: d3.sum(val, d => d.SL),
        DoanhThu: d3.sum(val, d => d.DoanhThu),
        HienThi: `[${maNhom}] ${tenNhom}`
      });
    });
  });

  // S·∫Øp x·∫øp gi·∫£m d·∫ßn theo DoanhThu
  grouped.sort((a, b) => d3.descending(a.DoanhThu, b.DoanhThu));

  // Thi·∫øt l·∫≠p khung v·∫Ω
  const svg = d3.select("#chart2"),
        margin = {top: 40, right: 100, bottom: 30, left: 250},
        width = +svg.attr("width") - margin.left - margin.right,
        height = +svg.attr("height") - margin.top - margin.bottom;

  const g = svg.append("g")
               .attr("transform", `translate(${margin.left},${margin.top})`);

  const x = d3.scaleLinear()
              .domain([0, d3.max(grouped, d => d.DoanhThu)])
              .range([0, width]);

  const y = d3.scaleBand()
              .domain(grouped.map(d => d.HienThi))
              .range([0, height])
              .padding(0.2);

  // üé® M√†u c·ªë ƒë·ªãnh theo nh√≥m
  const gradients = {
    "BOT": ["#264D59", "#264D59"],
    "SET": ["#43978D", "#43978D"],
    "THO": ["#D46C4E", "#D46C4E"],
    "TTC": ["#F9AD6A", "#F9AD6A"],
    "TMX": ["#F9E07F", "#F9E07F"]
  };

  const color = d3.scaleOrdinal()
                  .domain(Object.keys(gradients))
                  .range(Object.values(gradients).map(g => g[0]));

  // ‚úÖ Tr·ª•c X (in ƒë·∫≠m)
  g.append("g")
   .attr("transform", `translate(0,${height})`)
   .call(d3.axisBottom(x).tickFormat(d => {
     if (d >= 1e9) return (d / 1e9).toFixed(1) + "B";
     return (d / 1e6).toFixed(0) + "M";
   }))
   .selectAll("text")
   .style("font-weight", "bold")
   .style("font-size", "15px");

  // ‚úÖ Tr·ª•c Y (in ƒë·∫≠m + tƒÉng size)
  g.append("g")
   .call(d3.axisLeft(y))
   .selectAll("text")
   .style("font-size", "15px")
   .style("font-weight", "bold");

  // V·∫Ω c·ªôt
  g.selectAll("rect")
    .data(grouped)
    .enter().append("rect")
      .attr("y", d => y(d.HienThi))
      .attr("width", d => x(d.DoanhThu))
      .attr("height", y.bandwidth())
      .attr("fill", d => color(d.Nhom))
      .append("title")
        .text(d => `${d.HienThi}\nDoanh thu: ${d3.format(",")(d.DoanhThu)} VND`);

  // ‚úÖ Ch√∫ th√≠ch text tr√™n c·ªôt (in ƒë·∫≠m)
  g.selectAll("text.value")
    .data(grouped)
    .enter().append("text")
      .attr("class", "value")
      .attr("x", d => x(d.DoanhThu) + 5)
      .attr("y", d => y(d.HienThi) + y.bandwidth()/2 + 5)
      .text(d => {
        if (d.DoanhThu >= 1e9) return (d.DoanhThu / 1e9).toFixed(1) + "B";
        return (d.DoanhThu / 1e6).toFixed(1) + "M";
      })
      .style("font-size", "13px")
      .style("fill", "#333")
      .style("font-weight", "bold");

  // Ti√™u ƒë·ªÅ
  svg.append("text")
     .attr("x", (width + margin.left + margin.right) / 2)
     .attr("y", 20)
     .attr("text-anchor", "middle")
     .style("font-size", "18px")
     .style("font-weight", "bold")
     .text("Doanh s·ªë b√°n h√†ng theo Nh√≥m h√†ng");
});
